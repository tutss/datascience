[
  {
    "instance_id": "mbd_p2_e3_a",
    "instruction": "Liste os nomes dos restaurantes que ficam em Santo André.",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select NomeR from Restaurante where CidadeR = 'Santo André';"
  },
  {
    "instance_id": "mbd_p2_e3_b",
    "instruction": "Liste todas as informações dos produtos cujo nome começa com a letra “c” e cujo preço por quilo é inferior a R$3,00.",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select * from Produto where (NomeP like 'c%' or NomeP like 'C%') and PrecoQuilo < 3;"
  },
  {
    "instance_id": "mbd_p2_e3_c",
    "instruction": "Liste os códigos dos agricultores que já entregaram produtos para o restaurante RU-USP",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select CodA from Entrega natural join Restaurante where NomeR = 'RU-USP';"
  },
  {
    "instance_id": "mbd_p2_e3_d",
    "instruction": "Liste os nomes dos produtos que já foram alguma vez entregues por um agricultor de Mogi das Cruzes.",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select distinct NomeP from Entrega natural join Produto natural join Agricultor where CidadeA = 'Mogi das Cruzes';"
  },
  {
    "instance_id": "mbd_p2_e3_e",
    "instruction": "Liste os códigos dos agricultores que já entregaram batatas e também já entregaram cebolas.",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "(select CodA from Entrega natural join Produto where NomeP = 'batata')\nintersect\n(select CodA from Entrega natural join Produto where NomeP = 'cebola');"
  },
  {
    "instance_id": "mbd_p2_e3_f",
    "instruction": "Liste os códigos dos agricultores que já entregaram batatas, mas nunca entregaram cebolas.",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "(select CodA from Entrega natural join Produto where NomeP = 'batata')\nexcept\n(select CodA from Entrega natural join Produto where NomeP = 'cebola');"
  },
  {
    "instance_id": "mbd_p2_e3_g",
    "instruction": "Liste todas as triplas (código do agricultor, código do produto, código do restaurante) extraídas de Entrega tais que o agricultor e o restaurante estejam na mesma cidade.",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select CodA, CodP, codR from Entrega natural join Agricultor natural join Restaurante where CidadeA = CidadeR;"
  },
  {
    "instance_id": "mbd_p2_e3_h",
    "instruction": "Obtenha o número total de restaurantes já supridos pelo agricultor “Machado de Assis”.",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select count(distinct CodR) from Entrega natural join Agricultor where NomeA = 'Machado de Assis';"
  },
  {
    "instance_id": "mbd_p2_e3_i",
    "instruction": "Liste os nomes das cidades onde ao menos um agricultor ou um restaurante esteja localizado.",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "(select CidadeA from Agricultor) union (select CidadeR from Restaurante);"
  },
  {
    "instance_id": "mbd_p2_e3_j",
    "instruction": "Obtenha o número de produtos que são fornecidos ou por um agricultor de São Paulo ou para um restaurante em São Paulo.",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select count(distinct CodP) from Entrega where CodA in (select CodA from Agricultor where CidadeA = 'São Paulo') or CodR in (select codR from Restaurante where CidadeR = 'São Paulo');"
  },
  {
    "instance_id": "mbd_p2_e3_k",
    "instruction": "Obtenha pares do tipo (código do agricultor, código do produto) tais que o agricultor indicado nunca tenha fornecido o produto indicado.",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select distinct CodA, CodP from Agricultor as A, Produto where CodP not in (select CodP from Entrega where CodA = A.CodA);"
  },
  {
    "instance_id": "mbd_p2_e3_l",
    "instruction": "Obtenha os códigos dos produtos e suas respectivas quantidades médias por entrega para os produtos que são fornecidos em uma quantidade média por entrega superior a 30 quilos.",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select codP from Entrega group by codP having avg(QtdeQuilos) > 30;"
  },
  {
    "instance_id": "mbd_p2_e3_m",
    "instruction": "Obtenha o(s) nome(s) dos produtos mais fornecidos a restaurantes (ou seja, os produtos dos quais as somas das quantidades já entregues é a maior possível).",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select NomeP from Entrega natural join Produto group by NomeP having sum(QtdeQuilos) >= ALL (select sum(QtdeQuilos) from Entrega group by CodP);"
  },
  {
    "instance_id": "mbd_p2_e3_n",
    "instruction": "Obtenha o nome do(s) agricultor(es) que fez(fizeram) a entrega de produtos mais antiga registrada no BD.",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select NomeA from Entrega natural join Agricultor where DataEntrega = (select min(DataEntrega) from Entrega);"
  },
  {
    "instance_id": "mbd_p2_e3_o",
    "instruction": "Liste os nomes dos produtos que são oferecidos a todos os restaurantes do BD. Ou seja, um produto não deve aparecer na lista se houver um restaurante que nunca o tenha recebido.",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select NomeP from Produto as P where not exists (\n\t(select CodR from Restaurante)\n\texcept\n\t(select CodR from Entrega where CodP = P.CodP));"
  },
  {
    "instance_id": "mbd_p2_e3_p",
    "instruction": "Liste todos os pares possíveis do tipo (i,j) tal que i é o nome de um agricultor, j é o nome de um restaurante e i já entregou um produto para j. Mas atenção: o nome de todos os agricultores cadastrados no BD deve aparecer no conjunto resposta. Se um agricultor nunca fez uma entrega, então o seu nome deve vir acompanhado de NULL no conjunto resposta",
    "db_id": "cooperagri",
    "db_schema": "Agricultor(CodA: integer, NomeA: string, CidadeA: string)\nProduto(CodP: integer, NomeP: string, PrecoQuilo: real)\nRestaurante( CodR : integer, NomeR:string, CidadeR: string)\nEntrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select NomeA, NomeR from (Entrega natural join Restaurante) natural right outer join Agricultor;"
  },
  {
    "instance_id": "mbd_p2_p1_a",
    "instruction": "Encontre o nome de todos os Juniores (nível = JR) que estão matriculados em um curso ministrado por Ivana Teach.",
    "db_id": "alunos",
    "db_schema": "Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)\nCurso(nome: string, horario: string, sala: string, idProf: integer)\nMatriculado(nroAluno: integer, nomeCurso: string)\nProfessor(idProf: integer, nomeProf: string, idDepto: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select A.nomeAluno\nfrom Aluno as A, Curso as C, Professor as P, Matriculado as M\nwhere A.nivel='JR'\nand P.nomeProf = 'Ivana Teach'\nand C.idProf = P.idProf\nand M.nomeCurso = C.nome\nand M.nroAluno = A.nroAluno;"
  },
  {
    "instance_id": "mbd_p2_p1_b",
    "instruction": "Encontre o nome do aluno mais velho que é formado em History ou matriculado em um curso ministrado pelo Ivana Teach.",
    "db_id": "alunos",
    "db_schema": "Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)\nCurso(nome: string, horario: string, sala: string, idProf: integer)\nMatriculado(nroAluno: integer, nomeCurso: string)\nProfessor(idProf: integer, nomeProf: string, idDepto: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select nomeAluno\nfrom Aluno\nwhere formacao = 'History'\nor nroAluno in (\nselect A2.nroALuno\nfrom Aluno as A2, Curso as C, Professor as P, Matriculado as M\nwhere P.nomeProf = 'Ivana Teach'\nand C.idProf = P.idProf\nand M.nomeCurso = C.nome\nand M.nroAluno = A2.nroAluno)\nand idade >= all (\nselect A1.idade\nfrom Aluno as A1\nwhere A1.formacao = 'History' or\n A1.nroAluno in (\nselect A2.nroALuno\nfrom Aluno as A2, Curso as C, Professor as P, Matriculado as M\nwhere P.nomeProf = 'Ivana Teach'\nand C.idProf = P.idProf\nand M.nomeCurso = C.nome\nand M.nroAluno = A2.nroAluno));"
  },
  {
    "instance_id": "mbd_p2_p1_c",
    "instruction": "Encontre os nomes de todos os cursos que são ministrados na sala R128 ou que têm 3 ou mais alunos matriculados.",
    "db_id": "alunos",
    "db_schema": "Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)\nCurso(nome: string, horario: string, sala: string, idProf: integer)\nMatriculado(nroAluno: integer, nomeCurso: string)\nProfessor(idProf: integer, nomeProf: string, idDepto: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select nome\nfrom Curso as C\nwhere sala = 'R128' or\n(select count(distinct nroAluno)\n from Matriculado where nomeCurso = C.nome) >= 3;"
  },
  {
    "instance_id": "mbd_p2_p1_d",
    "instruction": "Encontre os nomes de todos os alunos que estão matriculados em dois cursos que são ministrados no mesmo horário.",
    "db_id": "alunos",
    "db_schema": "Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)\nCurso(nome: string, horario: string, sala: string, idProf: integer)\nMatriculado(nroAluno: integer, nomeCurso: string)\nProfessor(idProf: integer, nomeProf: string, idDepto: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select nomeAluno\nfrom Aluno\nwhere nroAluno in\n(select M1.nroAluno\nfrom Matriculado as M1, Matriculado as M2, Curso as C1, Curso as C2\nwhere M1.nroAluno = M2.nroAluno\nand M1.nomeCurso <> M2.nomeCurso\nand M1.nomeCurso = C1.nome\nand M2.nomeCurso = C2.nome\nand C1.horario = C2.horario);"
  },
  {
    "instance_id": "mbd_p2_p1_e",
    "instruction": "Encontre os nomes dos professores para os quais a quantidade de alunos na lista de matriculados de ao menos um dos cursos que eles ministram é menor do que 2.",
    "db_id": "alunos",
    "db_schema": "Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)\nCurso(nome: string, horario: string, sala: string, idProf: integer)\nMatriculado(nroAluno: integer, nomeCurso: string)\nProfessor(idProf: integer, nomeProf: string, idDepto: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select nomeProf\nfrom professor as P, curso as C\nwhere P.idProf = C.idProf and\n(select count(nroAluno) from Matriculado\nwhere C.nome = nomeCurso) < 2;"
  },
  {
    "instance_id": "mbd_p2_p1_f",
    "instruction": "Para cada valor de nível que aparece em Aluno, imprima o nível e idade média dos alunos desse nível.",
    "db_id": "alunos",
    "db_schema": "Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)\nCurso(nome: string, horario: string, sala: string, idProf: integer)\nMatriculado(nroAluno: integer, nomeCurso: string)\nProfessor(idProf: integer, nomeProf: string, idDepto: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select nivel, avg(idade) as idadeMedia\nfrom aluno group by nivel;"
  },
  {
    "instance_id": "mbd_p2_p1_g",
    "instruction": "Para cada valor de nível que aparece em Aluno exceto JR, imprima o nível e idade média dos alunos desse nível.",
    "db_id": "alunos",
    "db_schema": "Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)\nCurso(nome: string, horario: string, sala: string, idProf: integer)\nMatriculado(nroAluno: integer, nomeCurso: string)\nProfessor(idProf: integer, nomeProf: string, idDepto: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select nivel, avg(idade) as idadeMedia\nfrom aluno group by nivel having nivel <> 'JR';"
  },
  {
    "instance_id": "mbd_p2_p1_h",
    "instruction": "Para cada professor que ministra cursos apenas na sala R128, imprima seu nome e o número total de cursos que ele ou ela ministra.",
    "db_id": "alunos",
    "db_schema": "Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)\nCurso(nome: string, horario: string, sala: string, idProf: integer)\nMatriculado(nroAluno: integer, nomeCurso: string)\nProfessor(idProf: integer, nomeProf: string, idDepto: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select nomeProf, numeroCursos\nfrom professor natural join\n(select idProf, count(*) as numeroCursos from curso\n where idProf not in (select idProf from curso where sala <> 'R128')\n group by idProf) as C;"
  },
  {
    "instance_id": "mbd_p2_p1_i",
    "instruction": "Encontre os nomes dos alunos matriculados no número máximo de cursos.",
    "db_id": "alunos",
    "db_schema": "Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)\nCurso(nome: string, horario: string, sala: string, idProf: integer)\nMatriculado(nroAluno: integer, nomeCurso: string)\nProfessor(idProf: integer, nomeProf: string, idDepto: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select nomeAluno from Aluno where nroAluno in\n(select nroAluno from Matriculado group by nroAluno\n having count(*) >= all\n (select count(nomeCurso) from Matriculado group by nroAluno));"
  },
  {
    "instance_id": "mbd_p2_p1_j",
    "instruction": "Encontre os nomes dos alunos matriculados em nenhum curso.",
    "db_id": "alunos",
    "db_schema": "Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)\nCurso(nome: string, horario: string, sala: string, idProf: integer)\nMatriculado(nroAluno: integer, nomeCurso: string)\nProfessor(idProf: integer, nomeProf: string, idDepto: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select nomeAluno\nfrom Aluno\nwhere nroAluno not in\n(select nroAluno\nfrom Matriculado);"
  },
  {
    "instance_id": "mbd_p2_p1_k",
    "instruction": "Para cada valor de idade que aparece em Aluno, encontre o valor do nível que aparece com mais frequência. Por exemplo, se houver mais alunos no nível FR com idade 18 do que os alunos com idade 18 dos níveis SR, JR ou SO, você deve imprimir o par (18,FR).",
    "db_id": "alunos",
    "db_schema": "Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)\nCurso(nome: string, horario: string, sala: string, idProf: integer)\nMatriculado(nroAluno: integer, nomeCurso: string)\nProfessor(idProf: integer, nomeProf: string, idDepto: integer)",
    "gold_ignore_order": true,
    "gold_sql": "select idade, nivel from Aluno as A group by idade, nivel\nhaving count(nivel) >= all\n(select count(*) from Aluno where idade = A.idade group by nivel);"
  }
]