question,expected_query,llm_query,llm_executed_query_results,expected_query_results,auditor_answer,auditor_query_results_answer
Liste os nomes dos restaurantes que ficam em Santo André.,select nomer from restaurante where cidader = 'santo andré';,"select nomer as ""restaurant name"" from restaurante where cidader = 'santo andré';",Sabor de Minas,"[('Sabor de Minas',)]",false,true
"Liste todas as informações dos produtos cujo nome começa com a letra “c”  e cujo preço por quilo é inferior a R$3,00.",select * from produto where (nomep like 'c%' or nomep like 'c%') and precoquilo < 3;,"select codp, nomep, precoquilo   from produto   where lower(nomep) like 'c%'     and precoquilo < 3.00;","2003: cebola (max length: 2.98)
2004: cenoura (max length: 1.98)
2005: chuchu (max length: 2.49)","[(2003, 'cebola', Decimal('2.98')), (2004, 'cenoura', Decimal('1.98')), (2005, 'chuchu', Decimal('2.49'))]",false,true
Liste os códigos dos agricultores que já entregaram produtos para o restaurante RU-USP.,select coda from entrega natural join restaurante where nomer = 'ru-usp';,select distinct a.coda   from agricultor a   join entrega e on a.coda = e.coda   join restaurante r on e.codr = r.codr   where r.nomer = 'ru-usp'   order by a.coda;,"1001, 1004","[(1004,), (1001,)]",false,true
Liste os nomes dos produtos que já foram alguma vez entregues por um agricultor de Mogi das Cruzes.,select distinct nomep from entrega natural join produto natural join agricultor where cidadea = 'mogi das cruzes';,"select distinct p.nomep, p.precoquilo   from entrega e   join agricultor a on e.coda = a.coda   join produto p on e.codp = p.codp   where a.cidadea = 'mogi das cruzes'   order by p.nomep;","[('alface', Decimal('2.98')), ('batata', Decimal('0.98')), ('cebola', Decimal('2.98')), ('chuchu', Decimal('2.49')), ('couve-flor', Decimal('3.90'))]","[('alface',), ('batata',), ('cebola',), ('chuchu',), ('couve-flor',)]",false,false
Liste os códigos dos agricultores que já entregaram batatas e também já entregaram cebolas.,select coda from entrega natural join produto where nomep = 'batata' intersect select coda from entrega natural join produto where nomep = 'cebola';,select distinct a.coda   from agricultor a   where exists (       select 1       from entrega e       inner join produto p on e.codp = p.codp       where e.coda = a.coda and p.nomep = 'batatas'   )   and exists (       select 1       from entrega e       inner join produto p on e.codp = p.codp       where e.coda = a.coda and p.nomep = 'cebolas'   );,,"[(1002,), (1004,), (1003,)]",true,false
"Liste os códigos dos agricultores que já entregaram batatas, mas nunca entregaram cebolas.",(select coda from entrega natural join produto where nomep = 'batata') except (select coda from entrega natural join produto where nomep = 'cebola');,   select distinct a.coda   from agricultor a   join entrega e on a.coda = e.coda   join produto p on e.codp = p.codp   where p.nomep = 'batatas'     and not exists (         select 1         from entrega e2         join produto p2 on e2.codp = p2.codp         where e2.coda = a.coda and p2.nomep = 'cebolas'     );   ,,"[(1005,)]",true,false
"Liste todas as triplas (código do agricultor, código do produto, código do restaurante) extraídas de Entrega tais que o agricultor e o restaurante estejam na mesma cidade.","select coda, codp, codr from entrega natural join agricultor natural join restaurante where cidadea = cidader;","   select       e.coda as codigo_agricultor,       e.codp as codigo_produto,       e.codr as codigo_restaurante   from entrega e   join agricultor a on e.coda = a.coda   join restaurante r on e.codr = r.codr   where a.cidadea = r.cidader;   ","1001: 2005 (max length: 3010)
1002: 2002 (max length: 3010)
1007: 2003 (max length: 3004)
1003: 2002 (max length: 3010)
1006: 2003 (max length: 3001)","[(1001, 2005, 3010), (1002, 2002, 3010), (1007, 2003, 3004), (1003, 2002, 3010), (1006, 2003, 3001)]",true,true
Obtenha o número total de restaurantes já supridos pelo agricultor de nome “Machado de Assis”.,select count(distinct codr) from entrega natural join agricultor where nomea = 'machado de assis';,   select count(distinct e.codr) as total_restaurants   from entrega e   join agricultor a on e.coda = a.coda   where a.nomea = 'machado de assis';   ,5,"[(5,)]",true,true
Liste os nomes das cidades onde ao menos um agricultor ou um restaurante esteja localizado.,(select cidadea from agricultor) union (select cidader from restaurante);,   select cidadea as city   from agricultor   union   select cidader as city   from restaurante;   ,"Campinas, Atibaia, Santo André, São Caetano, Diadema, Mogi das Cruzes, São Paulo, Taubaté, Osasco","[('Campinas',), ('Atibaia',), ('Santo André',), ('São Caetano',), ('Diadema',), ('Mogi das Cruzes',), ('São Paulo',), ('Taubaté',), ('Osasco',)]",true,true
Obtenha o número de produtos que são fornecidos ou por um agricultor de São Paulo ou para um restaurante em São Paulo.,select count(distinct codp) from entrega where coda in (select coda from agricultor where cidadea = 'são paulo') or codr in (select codr from restaurante where cidader = 'são paulo');, select count(distinct e.codp) as total_products from entrega e join agricultor a on e.coda = a.coda join restaurante r on e.codr = r.codr where a.cidadea = 'são paulo' or r.cidade = 'são paulo'; ,Failed,"[(5,)]",true,false
"Obtenha pares do tipo (código do agricultor, código do produto) tais que o agricultor indicado nunca tenha fornecido o produto indicado.","select distinct coda, codp from agricultor as a, produto where codp not in (select codp from entrega where coda = a.coda);","   select a.coda as codigo_agricultor,          p.codp as codigo_produto   from agricultor a   cross join produto p   left join entrega e on a.coda = e.coda and p.codp = e.codp   where e.coda is null;   ","[(1001, 2001), (1002, 2001), (1003, 2001), (1004, 2001), (1006, 2001), (1007, 2001), (1008, 2001), (1009, 2001), (1001, 2002), (1006, 2002), (1007, 2002), (1008, 2002), (1009, 2002), (1005, 2003), (1008, 2003), (1009, 2003), (1001, 2004), (1002, 2004), (1003, 2004), (1004, 2004), (1005, 2004), (1006, 2004), (1007, 2004), (1008, 2004), (1009, 2004), (1003, 2005), (1005, 2005), (1006, 2005), (1007, 2005), (1008, 2005), (1009, 2005), (1001, 2006), (1002, 2006), (1003, 2006), (1004, 2006), (1005, 2006), (1006, 2006), (1007, 2006), (1008, 2006), (1009, 2006), (1001, 2007), (1003, 2007), (1004, 2007), (1005, 2007), (1006, 2007), (1008, 2007), (1009, 2007), (1001, 2008), (1002, 2008), (1003, 2008), (1005, 2008), (1006, 2008), (1008, 2008), (1009, 2008), (1001, 2009), (1002, 2009), (1003, 2009), (1004, 2009), (1005, 2009), (1006, 2009), (1007, 2009), (1008, 2009), (1009, 2009), (1001, 2010), (1002, 2010), (1003, 2010), (1005, 2010), (1006, 2010), (1007, 2010), (1008, 2010), (1009, 2010), (1001, 2011), (1002, 2011), (1003, 2011), (1004, 2011), (1007, 2011), (1008, 2011), (1009, 2011), (1001, 2012), (1002, 2012), (1004, 2012), (1005, 2012), (1006, 2012), (1007, 2012), (1008, 2012), (1009, 2012), (1001, 2013), (1002, 2013), (1003, 2013), (1004, 2013), (1005, 2013), (1006, 2013), (1007, 2013), (1008, 2013), (1009, 2013)]","[(1001, 2001), (1001, 2002), (1001, 2004), (1001, 2006), (1001, 2007), (1001, 2008), (1001, 2009), (1001, 2010), (1001, 2011), (1001, 2012), (1001, 2013), (1002, 2001), (1002, 2004), (1002, 2006), (1002, 2008), (1002, 2009), (1002, 2010), (1002, 2011), (1002, 2012), (1002, 2013), (1003, 2001), (1003, 2004), (1003, 2005), (1003, 2006), (1003, 2007), (1003, 2008), (1003, 2009), (1003, 2010), (1003, 2011), (1003, 2013), (1004, 2001), (1004, 2004), (1004, 2006), (1004, 2007), (1004, 2009), (1004, 2011), (1004, 2012), (1004, 2013), (1005, 2003), (1005, 2004), (1005, 2005), (1005, 2006), (1005, 2007), (1005, 2008), (1005, 2009), (1005, 2010), (1005, 2012), (1005, 2013), (1006, 2001), (1006, 2002), (1006, 2004), (1006, 2005), (1006, 2006), (1006, 2007), (1006, 2008), (1006, 2009), (1006, 2010), (1006, 2012), (1006, 2013), (1007, 2001), (1007, 2002), (1007, 2004), (1007, 2005), (1007, 2006), (1007, 2009), (1007, 2010), (1007, 2011), (1007, 2012), (1007, 2013), (1008, 2001), (1008, 2002), (1008, 2003), (1008, 2004), (1008, 2005), (1008, 2006), (1008, 2007), (1008, 2008), (1008, 2009), (1008, 2010), (1008, 2011), (1008, 2012), (1008, 2013), (1009, 2001), (1009, 2002), (1009, 2003), (1009, 2004), (1009, 2005), (1009, 2006), (1009, 2007), (1009, 2008), (1009, 2009), (1009, 2010), (1009, 2011), (1009, 2012), (1009, 2013)]",true,true
Obtenha os códigos dos produtos e suas respectivas quantidades médias por entrega  para os produtos que são fornecidos em uma quantidade média por entrega superior a 30 quilos.,select codp from entrega group by codp having avg(qtdequilos) > 30;,"select p.codp, avg(e.qtdequilos) as media_quilos   from produto as p   join entrega as e on p.codp = e.codp   group by p.codp   having avg(e.qtdequilos) > 30;","[(2011, Decimal('33.5000000000000000')), (2001, Decimal('36.0000000000000000')), (2012, Decimal('36.0000000000000000')), (2010, Decimal('52.0000000000000000')), (2003, Decimal('38.0909090909090909')), (2002, Decimal('34.5000000000000000'))]","[(2003,), (2012,), (2002,), (2010,), (2011,), (2001,)]",true,true
"Obtenha o(s) nome(s) dos produtos mais fornecidos a restaurantes (ou seja, os produtos dos quais as somas das quantidades já entregues é a maior possível).",select nomep from entrega group by nomep having sum(qtdequilos) = (select max(sum(qtdequilos)) from entrega group by nomep);,"   select p.nomep,          sum(e.qtdequilos) as total_quantity_delivered   from entrega e   join produto p on e.codp = p.codp   join restaurante r on e.codr = r.codr   group by p.nomep   order by total_quantity_delivered desc;   ","[('cebola', 419), ('batata', 138), ('chuchu', 78), ('beterraba', 67), ('couve-flor', 57), ('quiabo', 57), ('repolho', 52), ('tomate', 36), ('alface', 36)]",Failed,true,false
Obtenha o nome do(s) agricultor(es) que fez(fizeram) a entrega de produtos mais antiga registrada no BD.,select nomea from entrega natural join agricultor where dataentrega = (select min(dataentrega) from entrega);,select a.nomea   from agricultor a   join entrega e on a.coda = e.coda   where e.dataentrega = (select min(dataentrega) from entrega);,"Ana Maria Machado, Machado de Assis","[('Ana Maria Machado',), ('Machado de Assis',)]",false,true
"Liste os nomes dos produtos que são oferecidos a todos os restaurantes do BD. Ou seja, um produto não deve aparecer na lista se houver um restaurante que nunca o tenha recebido.",select nomep from produto as p where not exists ((select codr from restaurante) except (select codr from entrega where codp = p.codp));,"   select p.nomep   from produto p   join entrega e on p.codp = e.codp   group by p.codp, p.nomep   having count(distinct e.codr) = (select count(*) from restaurante);   ",cebola,"[('cebola',)]",true,true
"Liste todos os pares possíveis do tipo (i,j) tal que i é o nome de um agricultor, j é o nome de um restaurante e i já entregou um produto para j. Mas atenção: o nome de todos os agricultores cadastrados no BD deve aparecer no conjunto resposta. Se um agricultor nunca fez uma entrega, então o seu nome deve vir acompanhado de NULL no conjunto resposta.","select nomea, nomer from (entrega natural join restaurante) natural right outer join agricultor;","   select a.nomea as agricultor,          r.nomer as restaurante   from agricultor a   left join entrega e on a.coda = e.coda   left join restaurante r on e.codr = r.codr;   ","[('Ana Maria Machado', 'A Todo Sabor'), ('Machado de Assis', 'RU-USP'), ('Lima Barreto', 'Sabor de Minas'), ('Manuel Bandeira', 'Prato-Cheio'), ('Machado de Assis', 'Brasil a Gosto'), ('Cecília Meireles', 'Bom Gosto'), ('Oswald de Andrade', 'Sabor de Minas'), ('Oswald de Andrade', 'Sabor de Minas'), ('José de Alencar', 'A Todo Sabor'), ('José de Alencar', 'Bom de Garfo'), ('Machado de Assis', 'Bom de Garfo'), ('Cecília Meireles', 'Panela de Ouro'), ('José de Alencar', 'Sabor de Minas'), ('José de Alencar', 'Panela de Ouro'), ('Machado de Assis', 'Sabor de Minas'), ('Oswald de Andrade', 'Sabor de Minas'), ('Ana Maria Machado', 'Sabor de Minas'), ('Manuel Bandeira', 'A Todo Sabor'), ('Manuel Bandeira', 'Bom de Garfo'), ('Cecília Meireles', 'Bom de Garfo'), ('Lima Barreto', 'Brasileirinho'), ('José de Alencar', 'Bom Gosto'), ('Ana Maria Machado', 'RU-USP'), ('Cecília Meireles', 'Bom de Garfo'), ('Manuel Bandeira', 'Sabores do Interior'), ('Manuel Bandeira', 'Brasil a Gosto'), ('Machado de Assis', 'A Todo Sabor'), ('Monteiro Lobato', None), ('Castro Alves', None)]","[('Ana Maria Machado', 'A Todo Sabor'), ('Machado de Assis', 'RU-USP'), ('Lima Barreto', 'Sabor de Minas'), ('Manuel Bandeira', 'Prato-Cheio'), ('Machado de Assis', 'Brasil a Gosto'), ('Cecília Meireles', 'Bom Gosto'), ('Oswald de Andrade', 'Sabor de Minas'), ('Oswald de Andrade', 'Sabor de Minas'), ('José de Alencar', 'A Todo Sabor'), ('José de Alencar', 'Bom de Garfo'), ('Machado de Assis', 'Bom de Garfo'), ('Cecília Meireles', 'Panela de Ouro'), ('José de Alencar', 'Sabor de Minas'), ('José de Alencar', 'Panela de Ouro'), ('Machado de Assis', 'Sabor de Minas'), ('Oswald de Andrade', 'Sabor de Minas'), ('Ana Maria Machado', 'Sabor de Minas'), ('Manuel Bandeira', 'A Todo Sabor'), ('Manuel Bandeira', 'Bom de Garfo'), ('Cecília Meireles', 'Bom de Garfo'), ('Lima Barreto', 'Brasileirinho'), ('José de Alencar', 'Bom Gosto'), ('Ana Maria Machado', 'RU-USP'), ('Cecília Meireles', 'Bom de Garfo'), ('Manuel Bandeira', 'Sabores do Interior'), ('Manuel Bandeira', 'Brasil a Gosto'), ('Machado de Assis', 'A Todo Sabor'), ('Monteiro Lobato', None), ('Castro Alves', None)]",false,true
