instance_id,instruction,db_id,db_schema,gold_ignore_order,gold_sql,llm_query,llm_executed_query_results,gold_sql_results,expected_query,auditor_answer,auditor_query_results_answer
mbd_p2_e3_a,Liste os nomes dos restaurantes que ficam em Santo André.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select NomeR from Restaurante where CidadeR = 'Santo André';,select nomer from restaurante where cidader = 'santo andré';,Sabor de Minas,"[('Sabor de Minas',)]",select nomer from restaurante where cidader = 'santo andré';,false,true
mbd_p2_e3_b,"Liste todas as informações dos produtos cujo nome começa com a letra “c” e cujo preço por quilo é inferior a R$3,00.",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select * from Produto where (NomeP like 'c%' or NomeP like 'C%') and PrecoQuilo < 3;,select *   from produto   where nomep like 'c%'     and precoquilo < 3.00;,"2003: cebola (max length: 2.98)
2004: cenoura (max length: 1.98)
2005: chuchu (max length: 2.49)","[(2003, 'cebola', Decimal('2.98')), (2004, 'cenoura', Decimal('1.98')), (2005, 'chuchu', Decimal('2.49'))]",select * from produto where (nomep like 'c%' or nomep like 'c%') and precoquilo < 3;,false,true
mbd_p2_e3_c,Liste os códigos dos agricultores que já entregaram produtos para o restaurante RU-USP,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select CodA from Entrega natural join Restaurante where NomeR = 'RU-USP';,"select distinct a.coda, a.nomea   from agricultor a   join entrega e on a.coda = e.coda   join restaurante r on e.codr = r.codr   where r.nomer = 'ru-usp';","[(1001, 'Ana Maria Machado'), (1004, 'Machado de Assis')]","[(1004,), (1001,)]",select coda from entrega natural join restaurante where nomer = 'ru-usp';,false,false
mbd_p2_e3_d,Liste os nomes dos produtos que já foram alguma vez entregues por um agricultor de Mogi das Cruzes.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select distinct NomeP from Entrega natural join Produto natural join Agricultor where CidadeA = 'Mogi das Cruzes';,   select distinct p.nomep   from produto p   join entrega e on p.codp = e.codp   join agricultor a on e.coda = a.coda   where a.cidadea = 'mogi das cruzes'   order by p.nomep;   ,"alface, batata, cebola, chuchu, couve-flor","[('alface',), ('batata',), ('cebola',), ('chuchu',), ('couve-flor',)]",select distinct nomep from entrega natural join produto natural join agricultor where cidadea = 'mogi das cruzes';,false,true
mbd_p2_e3_e,Liste os códigos dos agricultores que já entregaram batatas e também já entregaram cebolas.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,"(select CodA from Entrega natural join Produto where NomeP = 'batata')
intersect
(select CodA from Entrega natural join Produto where NomeP = 'cebola');","   select a.coda, a.nomea, a.cidadea   from agricultor a   join entrega e on a.coda = e.coda   join produto p on e.codp = p.codp   where p.nomep in ('potatoes', 'onions')   group by a.coda, a.nomea, a.cidadea   having count(distinct p.nomep) = 2;   ",,"[(1002,), (1004,), (1003,)]",(select coda from entrega natural join produto where nomep = 'batata') intersect (select coda from entrega natural join produto where nomep = 'cebola');,false,false
mbd_p2_e3_f,"Liste os códigos dos agricultores que já entregaram batatas, mas nunca entregaram cebolas.",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,"(select CodA from Entrega natural join Produto where NomeP = 'batata')
except
(select CodA from Entrega natural join Produto where NomeP = 'cebola');",   select distinct e.coda   from entrega e   join produto p on e.codp = p.codp   where p.nomep = 'batatas'     and e.coda not in (       select e2.coda       from entrega e2       join produto p2 on e2.codp = p2.codp       where p2.nomep = 'cebolas'     );   ,,"[(1005,)]",(select coda from entrega natural join produto where nomep = 'batata') except (select coda from entrega natural join produto where nomep = 'cebola');,true,false
mbd_p2_e3_g,"Liste todas as triplas (código do agricultor, código do produto, código do restaurante) extraídas de Entrega tais que o agricultor e o restaurante estejam na mesma cidade.",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,"select CodA, CodP, codR from Entrega natural join Agricultor natural join Restaurante where CidadeA = CidadeR;","   select       e.coda,       e.codp,       e.codr   from       entrega as e   join       agricultor as a on e.coda = a.coda   join       restaurante as r on e.codr = r.codr   where       a.cidadea = r.cidader;   ","1001: 2005 (max length: 3010)
1002: 2002 (max length: 3010)
1007: 2003 (max length: 3004)
1003: 2002 (max length: 3010)
1006: 2003 (max length: 3001)","[(1001, 2005, 3010), (1002, 2002, 3010), (1007, 2003, 3004), (1003, 2002, 3010), (1006, 2003, 3001)]","select coda, codp, codr from entrega natural join agricultor natural join restaurante where cidadea = cidader;",false,true
mbd_p2_e3_h,Obtenha o número total de restaurantes já supridos pelo agricultor “Machado de Assis”.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select count(distinct CodR) from Entrega natural join Agricultor where NomeA = 'Machado de Assis';,   select count(distinct r.codr) as totalrestaurantesatendidos   from agricultor a   join entrega e on a.coda = e.coda   join restaurante r on e.codr = r.codr   where a.nomea = 'machado de assis';   ,5,"[(5,)]",select count(distinct codr) from entrega natural join agricultor where nomea = 'machado de assis';,false,true
mbd_p2_e3_i,Liste os nomes das cidades onde ao menos um agricultor ou um restaurante esteja localizado.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,(select CidadeA from Agricultor) union (select CidadeR from Restaurante);,select distinct city from (     select cidadea as city from agricultor     union     select cidader as city from restaurante ) as allcities;,"Taubaté, Diadema, Osasco, Mogi das Cruzes, Atibaia, Santo André, Campinas, São Paulo, São Caetano","[('Campinas',), ('Atibaia',), ('Santo André',), ('São Caetano',), ('Diadema',), ('Mogi das Cruzes',), ('São Paulo',), ('Taubaté',), ('Osasco',)]",(select cidadea from agricultor) union (select cidader from restaurante);,true,true
mbd_p2_e3_j,Obtenha o número de produtos que são fornecidos ou por um agricultor de São Paulo ou para um restaurante em São Paulo.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select count(distinct CodP) from Entrega where CodA in (select CodA from Agricultor where CidadeA = 'São Paulo') or CodR in (select codR from Restaurante where CidadeR = 'São Paulo');,select count(distinct p.codp) as numeroprodutos  from entrega e  join agricultor a on e.coda = a.coda  join restaurante r on e.codr = r.codr  join produto p on e.codp = p.codp  where a.cidadea = 'são paulo'     or r.cidader = 'são paulo';,5,"[(5,)]",select count(distinct codp) from entrega where coda in (select coda from agricultor where cidadea = 'são paulo') or codr in (select codr from restaurante where cidader = 'são paulo');,true,true
mbd_p2_e3_k,"Obtenha pares do tipo (código do agricultor, código do produto) tais que o agricultor indicado nunca tenha fornecido o produto indicado.",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,"select distinct CodA, CodP from Agricultor as A, Produto where CodP not in (select CodP from Entrega where CodA = A.CodA);","   select a.coda, p.codp   from agricultor a   cross join produto p   where not exists (       select 1       from entrega e       where e.coda = a.coda         and e.codp = p.codp   );   ","[(1001, 2001), (1002, 2001), (1003, 2001), (1004, 2001), (1006, 2001), (1007, 2001), (1008, 2001), (1009, 2001), (1001, 2002), (1006, 2002), (1007, 2002), (1008, 2002), (1009, 2002), (1005, 2003), (1008, 2003), (1009, 2003), (1001, 2004), (1002, 2004), (1003, 2004), (1004, 2004), (1005, 2004), (1006, 2004), (1007, 2004), (1008, 2004), (1009, 2004), (1003, 2005), (1005, 2005), (1006, 2005), (1007, 2005), (1008, 2005), (1009, 2005), (1001, 2006), (1002, 2006), (1003, 2006), (1004, 2006), (1005, 2006), (1006, 2006), (1007, 2006), (1008, 2006), (1009, 2006), (1001, 2007), (1003, 2007), (1004, 2007), (1005, 2007), (1006, 2007), (1008, 2007), (1009, 2007), (1001, 2008), (1002, 2008), (1003, 2008), (1005, 2008), (1006, 2008), (1008, 2008), (1009, 2008), (1001, 2009), (1002, 2009), (1003, 2009), (1004, 2009), (1005, 2009), (1006, 2009), (1007, 2009), (1008, 2009), (1009, 2009), (1001, 2010), (1002, 2010), (1003, 2010), (1005, 2010), (1006, 2010), (1007, 2010), (1008, 2010), (1009, 2010), (1001, 2011), (1002, 2011), (1003, 2011), (1004, 2011), (1007, 2011), (1008, 2011), (1009, 2011), (1001, 2012), (1002, 2012), (1004, 2012), (1005, 2012), (1006, 2012), (1007, 2012), (1008, 2012), (1009, 2012), (1001, 2013), (1002, 2013), (1003, 2013), (1004, 2013), (1005, 2013), (1006, 2013), (1007, 2013), (1008, 2013), (1009, 2013)]","[(1001, 2001), (1001, 2002), (1001, 2004), (1001, 2006), (1001, 2007), (1001, 2008), (1001, 2009), (1001, 2010), (1001, 2011), (1001, 2012), (1001, 2013), (1002, 2001), (1002, 2004), (1002, 2006), (1002, 2008), (1002, 2009), (1002, 2010), (1002, 2011), (1002, 2012), (1002, 2013), (1003, 2001), (1003, 2004), (1003, 2005), (1003, 2006), (1003, 2007), (1003, 2008), (1003, 2009), (1003, 2010), (1003, 2011), (1003, 2013), (1004, 2001), (1004, 2004), (1004, 2006), (1004, 2007), (1004, 2009), (1004, 2011), (1004, 2012), (1004, 2013), (1005, 2003), (1005, 2004), (1005, 2005), (1005, 2006), (1005, 2007), (1005, 2008), (1005, 2009), (1005, 2010), (1005, 2012), (1005, 2013), (1006, 2001), (1006, 2002), (1006, 2004), (1006, 2005), (1006, 2006), (1006, 2007), (1006, 2008), (1006, 2009), (1006, 2010), (1006, 2012), (1006, 2013), (1007, 2001), (1007, 2002), (1007, 2004), (1007, 2005), (1007, 2006), (1007, 2009), (1007, 2010), (1007, 2011), (1007, 2012), (1007, 2013), (1008, 2001), (1008, 2002), (1008, 2003), (1008, 2004), (1008, 2005), (1008, 2006), (1008, 2007), (1008, 2008), (1008, 2009), (1008, 2010), (1008, 2011), (1008, 2012), (1008, 2013), (1009, 2001), (1009, 2002), (1009, 2003), (1009, 2004), (1009, 2005), (1009, 2006), (1009, 2007), (1009, 2008), (1009, 2009), (1009, 2010), (1009, 2011), (1009, 2012), (1009, 2013)]","select distinct coda, codp from agricultor as a, produto where codp not in (select codp from entrega where coda = a.coda);",false,true
mbd_p2_e3_l,Obtenha os códigos dos produtos e suas respectivas quantidades médias por entrega para os produtos que são fornecidos em uma quantidade média por entrega superior a 30 quilos.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select codP from Entrega group by codP having avg(QtdeQuilos) > 30;,"select p.codp, p.nomep, avg(e.qtdequilos) as mediaqtdequilos   from entrega e   join produto p on e.codp = p.codp   group by p.codp, p.nomep   having avg(e.qtdequilos) > 30;","2011: beterraba (max length: 33.5000000000000000)
2001: tomate (max length: 36.0000000000000000)
2012: alface (max length: 36.0000000000000000)
2010: repolho (max length: 52.0000000000000000)
2003: cebola (max length: 38.0909090909090909)
2002: batata (max length: 34.5000000000000000)","[(2003,), (2012,), (2002,), (2010,), (2011,), (2001,)]",select codp from entrega group by codp having avg(qtdequilos) > 30;,true,true
mbd_p2_e3_m,"Obtenha o(s) nome(s) dos produtos mais fornecidos a restaurantes (ou seja, os produtos dos quais as somas das quantidades já entregues é a maior possível).",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select NomeP from Entrega natural join Produto group by NomeP having sum(QtdeQuilos) >= ALL (select sum(QtdeQuilos) from Entrega group by CodP);,"   select      p.nomep as ""nome do produto"",      sum(e.qtdequilos) as ""quantidade total entregue"" from      produto as p inner join      entrega as e on p.codp = e.codp group by      p.nomep order by      sum(e.qtdequilos) desc;   ","[('cebola', 419), ('batata', 138), ('chuchu', 78), ('beterraba', 67), ('couve-flor', 57), ('quiabo', 57), ('repolho', 52), ('tomate', 36), ('alface', 36)]","[('cebola',)]",select nomep from entrega natural join produto group by nomep having sum(qtdequilos) >= all (select sum(qtdequilos) from entrega group by codp);,false,false
mbd_p2_e3_n,Obtenha o nome do(s) agricultor(es) que fez(fizeram) a entrega de produtos mais antiga registrada no BD.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select NomeA from Entrega natural join Agricultor where DataEntrega = (select min(DataEntrega) from Entrega);,   select distinct a.nomea   from agricultor a   join entrega e on a.coda = e.coda   where e.dataentrega = (select min(dataentrega) from entrega);   ,"Ana Maria Machado, Machado de Assis","[('Ana Maria Machado',), ('Machado de Assis',)]",select nomea from entrega natural join agricultor where dataentrega = (select min(dataentrega) from entrega);,false,false
mbd_p2_e3_o,"Liste os nomes dos produtos que são oferecidos a todos os restaurantes do BD. Ou seja, um produto não deve aparecer na lista se houver um restaurante que nunca o tenha recebido.",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,"select NomeP from Produto as P where not exists (
	(select CodR from Restaurante)
	except
	(select CodR from Entrega where CodP = P.CodP));","select p.nomep   from produto p   join entrega e on p.codp = e.codp   group by p.codp, p.nomep   having count(distinct e.codr) = (select count(*) from restaurante);",cebola,"[('cebola',)]",select nomep from produto as p where not exists ( 	(select codr from restaurante) 	except 	(select codr from entrega where codp = p.codp));,true,true
mbd_p2_e3_p,"Liste todos os pares possíveis do tipo (i,j) tal que i é o nome de um agricultor, j é o nome de um restaurante e i já entregou um produto para j. Mas atenção: o nome de todos os agricultores cadastrados no BD deve aparecer no conjunto resposta. Se um agricultor nunca fez uma entrega, então o seu nome deve vir acompanhado de NULL no conjunto resposta",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,"select NomeA, NomeR from (Entrega natural join Restaurante) natural right outer join Agricultor;","   select       a.nomea,       r.nomer   from agricultor a   left join entrega e on a.coda = e.coda   left join restaurante r on e.codr = r.codr;   ","[('Ana Maria Machado', 'A Todo Sabor'), ('Machado de Assis', 'RU-USP'), ('Lima Barreto', 'Sabor de Minas'), ('Manuel Bandeira', 'Prato-Cheio'), ('Machado de Assis', 'Brasil a Gosto'), ('Cecília Meireles', 'Bom Gosto'), ('Oswald de Andrade', 'Sabor de Minas'), ('Oswald de Andrade', 'Sabor de Minas'), ('José de Alencar', 'A Todo Sabor'), ('José de Alencar', 'Bom de Garfo'), ('Machado de Assis', 'Bom de Garfo'), ('Cecília Meireles', 'Panela de Ouro'), ('José de Alencar', 'Sabor de Minas'), ('José de Alencar', 'Panela de Ouro'), ('Machado de Assis', 'Sabor de Minas'), ('Oswald de Andrade', 'Sabor de Minas'), ('Ana Maria Machado', 'Sabor de Minas'), ('Manuel Bandeira', 'A Todo Sabor'), ('Manuel Bandeira', 'Bom de Garfo'), ('Cecília Meireles', 'Bom de Garfo'), ('Lima Barreto', 'Brasileirinho'), ('José de Alencar', 'Bom Gosto'), ('Ana Maria Machado', 'RU-USP'), ('Cecília Meireles', 'Bom de Garfo'), ('Manuel Bandeira', 'Sabores do Interior'), ('Manuel Bandeira', 'Brasil a Gosto'), ('Machado de Assis', 'A Todo Sabor'), ('Monteiro Lobato', None), ('Castro Alves', None)]","[('Ana Maria Machado', 'A Todo Sabor'), ('Machado de Assis', 'RU-USP'), ('Lima Barreto', 'Sabor de Minas'), ('Manuel Bandeira', 'Prato-Cheio'), ('Machado de Assis', 'Brasil a Gosto'), ('Cecília Meireles', 'Bom Gosto'), ('Oswald de Andrade', 'Sabor de Minas'), ('Oswald de Andrade', 'Sabor de Minas'), ('José de Alencar', 'A Todo Sabor'), ('José de Alencar', 'Bom de Garfo'), ('Machado de Assis', 'Bom de Garfo'), ('Cecília Meireles', 'Panela de Ouro'), ('José de Alencar', 'Sabor de Minas'), ('José de Alencar', 'Panela de Ouro'), ('Machado de Assis', 'Sabor de Minas'), ('Oswald de Andrade', 'Sabor de Minas'), ('Ana Maria Machado', 'Sabor de Minas'), ('Manuel Bandeira', 'A Todo Sabor'), ('Manuel Bandeira', 'Bom de Garfo'), ('Cecília Meireles', 'Bom de Garfo'), ('Lima Barreto', 'Brasileirinho'), ('José de Alencar', 'Bom Gosto'), ('Ana Maria Machado', 'RU-USP'), ('Cecília Meireles', 'Bom de Garfo'), ('Manuel Bandeira', 'Sabores do Interior'), ('Manuel Bandeira', 'Brasil a Gosto'), ('Machado de Assis', 'A Todo Sabor'), ('Monteiro Lobato', None), ('Castro Alves', None)]","select nomea, nomer from (entrega natural join restaurante) natural right outer join agricultor;",false,true
mbd_p2_p1_a,Encontre o nome de todos os Juniores (nível = JR) que estão matriculados em um curso ministrado por Ivana Teach.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select A.nomeAluno
from Aluno as A, Curso as C, Professor as P, Matriculado as M
where A.nivel='JR'
and P.nomeProf = 'Ivana Teach'
and C.idProf = P.idProf
and M.nomeCurso = C.nome
and M.nroAluno = A.nroAluno;"," select distinct a.nroaluno,                 a.nomealuno,                 a.formação,                 a.nivel,                 a.idade from aluno a join matriculado m on a.nroaluno = m.nroaluno join curso c on m.nomecurso = c.nome join professor p on c.idprof = p.idprof where a.nivel = 'jr'   and p.nomeprof = 'ivana teach'; ",Failed,"[('Christopher Garcia',), ('Paul Hall',)]","select a.nomealuno from aluno as a, curso as c, professor as p, matriculado as m where a.nivel='jr' and p.nomeprof = 'ivana teach' and c.idprof = p.idprof and m.nomecurso = c.nome and m.nroaluno = a.nroaluno;",false,false
mbd_p2_p1_b,Encontre o nome do aluno mais velho que é formado em History ou matriculado em um curso ministrado pelo Ivana Teach.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nomeAluno
from Aluno
where formacao = 'History'
or nroAluno in (
select A2.nroALuno
from Aluno as A2, Curso as C, Professor as P, Matriculado as M
where P.nomeProf = 'Ivana Teach'
and C.idProf = P.idProf
and M.nomeCurso = C.nome
and M.nroAluno = A2.nroAluno)
and idade >= all (
select A1.idade
from Aluno as A1
where A1.formacao = 'History' or
 A1.nroAluno in (
select A2.nroALuno
from Aluno as A2, Curso as C, Professor as P, Matriculado as M
where P.nomeProf = 'Ivana Teach'
and C.idProf = P.idProf
and M.nomeCurso = C.nome
and M.nroAluno = A2.nroAluno));",   select a.nomealuno   from aluno a   where a.formação = 'história'      or exists (           select 1           from matriculado m           join curso c on m.nomecurso = c.nome           join professor p on c.idprof = p.idprof           where m.nroaluno = a.nroaluno             and p.nomeprof = 'ivana teach'      )   order by a.idade desc   limit 1;   ,Failed,"[('Christopher Garcia',), ('Angela Martinez',)]","select nomealuno from aluno where formacao = 'history' or nroaluno in ( select a2.nroaluno from aluno as a2, curso as c, professor as p, matriculado as m where p.nomeprof = 'ivana teach' and c.idprof = p.idprof and m.nomecurso = c.nome and m.nroaluno = a2.nroaluno) and idade >= all ( select a1.idade from aluno as a1 where a1.formacao = 'history' or  a1.nroaluno in ( select a2.nroaluno from aluno as a2, curso as c, professor as p, matriculado as m where p.nomeprof = 'ivana teach' and c.idprof = p.idprof and m.nomecurso = c.nome and m.nroaluno = a2.nroaluno));",false,false
mbd_p2_p1_c,Encontre os nomes de todos os cursos que são ministrados na sala R128 ou que têm 3 ou mais alunos matriculados.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nome
from Curso as C
where sala = 'R128' or
(select count(distinct nroAluno)
 from Matriculado where nomeCurso = C.nome) >= 3;",select distinct nome   from curso   where sala = 'r128'      or nome in (          select nomecurso          from matriculado          group by nomecurso          having count(nroaluno) >= 3      );,"Operating System Design, Database Systems, Dairy Herd Management, Patent Law, Data Structures, Intoduction to Math, Archaeology of the Incas","[('Data Structures',), ('Database Systems',), ('Operating System Design',), ('Archaeology of the Incas',), ('Patent Law',), ('Dairy Herd Management',), ('Intoduction to Math',)]",select nome from curso as c where sala = 'r128' or (select count(distinct nroaluno)  from matriculado where nomecurso = c.nome) >= 3;,false,true
mbd_p2_p1_d,Encontre os nomes de todos os alunos que estão matriculados em dois cursos que são ministrados no mesmo horário.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nomeAluno
from Aluno
where nroAluno in
(select M1.nroAluno
from Matriculado as M1, Matriculado as M2, Curso as C1, Curso as C2
where M1.nroAluno = M2.nroAluno
and M1.nomeCurso <> M2.nomeCurso
and M1.nomeCurso = C1.nome
and M2.nomeCurso = C2.nome
and C1.horario = C2.horario);",   select distinct a.nomealuno   from matriculado m1   join matriculado m2      on m1.nroaluno = m2.nroaluno and m1.nomecurso <> m2.nomecurso   join curso c1      on m1.nomecurso = c1.nome   join curso c2     on m2.nomecurso = c2.nome and c1.horario = c2.horario   join aluno a      on m1.nroaluno = a.nroaluno;   ,Luis Hernandez,"[('Luis Hernandez',)]","select nomealuno from aluno where nroaluno in (select m1.nroaluno from matriculado as m1, matriculado as m2, curso as c1, curso as c2 where m1.nroaluno = m2.nroaluno and m1.nomecurso <> m2.nomecurso and m1.nomecurso = c1.nome and m2.nomecurso = c2.nome and c1.horario = c2.horario);",true,false
mbd_p2_p1_e,Encontre os nomes dos professores para os quais a quantidade de alunos na lista de matriculados de ao menos um dos cursos que eles ministram é menor do que 2.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nomeProf
from professor as P, curso as C
where P.idProf = C.idProf and
(select count(nroAluno) from Matriculado
where C.nome = nomeCurso) < 2;","   select distinct p.nomeprof   from professor p   where p.idprof in (       select c.idprof       from curso c       left join matriculado m on c.nome = m.nomecurso       group by c.nome, c.idprof       having count(m.nroaluno) < 2   );   ","Richard Jackson, Mary Johnson, Jennifer Thomas, Patricia Jones, Linda Davis, Elizabeth Taylor, Barbara Wilson, Robert Brown, John Williams, William Moore","[('Linda Davis',), ('Barbara Wilson',), ('John Williams',), ('John Williams',), ('Barbara Wilson',), ('Jennifer Thomas',), ('William Moore',), ('Richard Jackson',), ('Elizabeth Taylor',), ('Elizabeth Taylor',), ('Richard Jackson',), ('Richard Jackson',), ('Richard Jackson',), ('Richard Jackson',), ('John Williams',), ('Robert Brown',), ('Mary Johnson',), ('Patricia Jones',), ('Richard Jackson',)]","select nomeprof from professor as p, curso as c where p.idprof = c.idprof and (select count(nroaluno) from matriculado where c.nome = nomecurso) < 2;",false,false
mbd_p2_p1_f,"Para cada valor de nível que aparece em Aluno, imprima o nível e idade média dos alunos desse nível.",alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nivel, avg(idade) as idadeMedia
from aluno group by nivel;","   select nivel, avg(idade) as average_age   from aluno   group by nivel;   ","[('JR', Decimal('19.5000000000000000')), ('SR', Decimal('20.7142857142857143')), ('FR', Decimal('17.6666666666666667')), ('SO', Decimal('18.4000000000000000'))]","[('JR', Decimal('19.5000000000000000')), ('SR', Decimal('20.7142857142857143')), ('FR', Decimal('17.6666666666666667')), ('SO', Decimal('18.4000000000000000'))]","select nivel, avg(idade) as idademedia from aluno group by nivel;",false,true
mbd_p2_p1_g,"Para cada valor de nível que aparece em Aluno exceto JR, imprima o nível e idade média dos alunos desse nível.",alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nivel, avg(idade) as idadeMedia
from aluno group by nivel having nivel <> 'JR';","select nivel, avg(idade) as average_age   from aluno   where nivel <> 'jr'   group by nivel;","[('SR', Decimal('20.7142857142857143')), ('FR', Decimal('17.6666666666666667')), ('SO', Decimal('18.4000000000000000'))]","[('SR', Decimal('20.7142857142857143')), ('FR', Decimal('17.6666666666666667')), ('SO', Decimal('18.4000000000000000'))]","select nivel, avg(idade) as idademedia from aluno group by nivel having nivel <> 'jr';",true,true
mbd_p2_p1_h,"Para cada professor que ministra cursos apenas na sala R128, imprima seu nome e o número total de cursos que ele ou ela ministra.",alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nomeProf, numeroCursos
from professor natural join
(select idProf, count(*) as numeroCursos from curso
 where idProf not in (select idProf from curso where sala <> 'R128')
 group by idProf) as C;","   select p.nomeprof,          count(c.nome) as total_courses   from professor p   join curso c on p.idprof = c.idprof   group by p.nomeprof   having min(c.sala) = 'r128' and max(c.sala) = 'r128';   ","[('Robert Brown', 1)]","[('Robert Brown', 1)]","select nomeprof, numerocursos from professor natural join (select idprof, count(*) as numerocursos from curso  where idprof not in (select idprof from curso where sala <> 'r128')  group by idprof) as c;",true,true
mbd_p2_p1_i,Encontre os nomes dos alunos matriculados no número máximo de cursos.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nomeAluno from Aluno where nroAluno in
(select nroAluno from Matriculado group by nroAluno
 having count(*) >= all
 (select count(nomeCurso) from Matriculado group by nroAluno));","   with course_counts as (       select nroaluno, count(*) as total_courses       from matriculado       group by nroaluno   ),   max_courses as (       select max(total_courses) as max_total       from course_counts   )   select a.nomealuno   from aluno a   join course_counts cc on a.nroaluno = cc.nroaluno   join max_courses mc on cc.total_courses = mc.max_total;   ","Ana Lopez, Juan Rodriguez","[('Ana Lopez',), ('Juan Rodriguez',)]",select nomealuno from aluno where nroaluno in (select nroaluno from matriculado group by nroaluno  having count(*) >= all  (select count(nomecurso) from matriculado group by nroaluno));,false,true
mbd_p2_p1_j,Encontre os nomes dos alunos matriculados em nenhum curso.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nomeAluno
from Aluno
where nroAluno not in
(select nroAluno
from Matriculado);",select a.nomealuno   from aluno a   left join matriculado m on a.nroaluno = m.nroaluno   where m.nroaluno is null   order by a.nomealuno;,"Angela Martinez, Charles Harris, Daniel Lee, Donald King, Dorthy Lewis, Edward Baker, George Wright, Margaret Clark, Maria White, Mark Young, Nancy Allen, Steven Green, Thomas Robinson","[('Maria White',), ('Charles Harris',), ('Angela Martinez',), ('Thomas Robinson',), ('Margaret Clark',), ('Dorthy Lewis',), ('Daniel Lee',), ('Nancy Allen',), ('Mark Young',), ('Donald King',), ('George Wright',), ('Steven Green',), ('Edward Baker',)]",select nomealuno from aluno where nroaluno not in (select nroaluno from matriculado);,true,false
mbd_p2_p1_k,"Para cada valor de idade que aparece em Aluno, encontre o valor do nível que aparece com mais frequência. Por exemplo, se houver mais alunos no nível FR com idade 18 do que os alunos com idade 18 dos níveis SR, JR ou SO, você deve imprimir o par (18,FR).",alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select idade, nivel from Aluno as A group by idade, nivel
having count(nivel) >= all
(select count(*) from Aluno where idade = A.idade group by nivel);","   with agelevelcount as (       select           idade,           nivel,           count(*) as level_count       from aluno       group by idade, nivel   ),   rankedlevels as (       select           idade,           nivel,           level_count,           row_number() over (partition by idade order by level_count desc) as rn       from agelevelcount   )   select       idade,       nivel   from rankedlevels   where rn = 1;   ","[(Decimal('17'), 'FR'), (Decimal('18'), 'FR'), (Decimal('19'), 'SO'), (Decimal('20'), 'JR'), (Decimal('21'), 'SR'), (Decimal('22'), 'SR')]","[(Decimal('17'), 'FR'), (Decimal('18'), 'FR'), (Decimal('21'), 'SR'), (Decimal('20'), 'JR'), (Decimal('19'), 'SO'), (Decimal('22'), 'SR')]","select idade, nivel from aluno as a group by idade, nivel having count(nivel) >= all (select count(*) from aluno where idade = a.idade group by nivel);",true,false
