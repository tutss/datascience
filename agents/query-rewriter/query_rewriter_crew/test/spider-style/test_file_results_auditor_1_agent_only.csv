instance_id,instruction,db_id,db_schema,gold_ignore_order,gold_sql,llm_query,llm_executed_query_results,gold_sql_results,llm_query_raw_results,auditor_answer,auditor_query_results_answer
mbd_p2_e3_a,Liste os nomes dos restaurantes que ficam em Santo André.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select NomeR from Restaurante where CidadeR = 'Santo André';,SELECT nomer FROM restaurante WHERE cidader = 'Santo André';,Sabor de Minas,"[('Sabor de Minas',)]","[('Sabor de Minas',)]",false,true
mbd_p2_e3_b,"Liste todas as informações dos produtos cujo nome começa com a letra “c” e cujo preço por quilo é inferior a R$3,00.",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select * from Produto where (NomeP like 'c%' or NomeP like 'C%') and PrecoQuilo < 3;,SELECT * FROM produto WHERE nomep ILIKE 'c%' AND precoquilo < 3.00;,"2003: cebola (max length: 2.98)
2004: cenoura (max length: 1.98)
2005: chuchu (max length: 2.49)","[(2003, 'cebola', Decimal('2.98')), (2004, 'cenoura', Decimal('1.98')), (2005, 'chuchu', Decimal('2.49'))]","[(2003, 'cebola', Decimal('2.98')), (2004, 'cenoura', Decimal('1.98')), (2005, 'chuchu', Decimal('2.49'))]",true,true
mbd_p2_e3_c,Liste os códigos dos agricultores que já entregaram produtos para o restaurante RU-USP,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select CodA from Entrega natural join Restaurante where NomeR = 'RU-USP';,SELECT DISTINCT a.coda FROM agricultor a JOIN entrega e ON a.coda = e.coda JOIN restaurante r ON e.codr = r.codr WHERE r.nomer = 'RU-USP';,"1001, 1004","[(1004,), (1001,)]","[(1001,), (1004,)]",true,true
mbd_p2_e3_d,Liste os nomes dos produtos que já foram alguma vez entregues por um agricultor de Mogi das Cruzes.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select distinct NomeP from Entrega natural join Produto natural join Agricultor where CidadeA = 'Mogi das Cruzes';, SELECT DISTINCT p.nomep FROM produto p JOIN entrega e ON p.codp = e.codp JOIN agricultor a ON e.coda = a.coda WHERE a.cidadea = 'Mogi das Cruzes'; ,"alface, batata, cebola, chuchu, couve-flor","[('alface',), ('batata',), ('cebola',), ('chuchu',), ('couve-flor',)]","[('alface',), ('batata',), ('cebola',), ('chuchu',), ('couve-flor',)]",true,true
mbd_p2_e3_e,Liste os códigos dos agricultores que já entregaram batatas e também já entregaram cebolas.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,(select CodA from Entrega natural join Produto where NomeP = 'batata') intersect (select CodA from Entrega natural join Produto where NomeP = 'cebola');," SELECT e.coda FROM entrega e JOIN produto p ON e.codp = p.codp WHERE p.nomep IN ('batatas', 'cebolas') GROUP BY e.coda HAVING COUNT(DISTINCT p.nomep) = 2; ",,"[(1002,), (1004,), (1003,)]",[],true,false
mbd_p2_e3_f,"Liste os códigos dos agricultores que já entregaram batatas, mas nunca entregaram cebolas.",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,(select CodA from Entrega natural join Produto where NomeP = 'batata') except (select CodA from Entrega natural join Produto where NomeP = 'cebola');, SELECT DISTINCT a.coda FROM agricultor a WHERE EXISTS (     SELECT 1     FROM entrega e     JOIN produto p ON e.codp = p.codp     WHERE e.coda = a.coda AND p.nomep = 'batatas' ) AND NOT EXISTS (     SELECT 1     FROM entrega e     JOIN produto p ON e.codp = p.codp     WHERE e.coda = a.coda AND p.nomep = 'cebolas' ); ,,"[(1005,)]",[],true,false
mbd_p2_e3_g,"Liste todas as triplas (código do agricultor, código do produto, código do restaurante) extraídas de Entrega tais que o agricultor e o restaurante estejam na mesma cidade.",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,"select CodA, CodP, codR from Entrega natural join Agricultor natural join Restaurante where CidadeA = CidadeR;"," SELECT      e.coda AS codigo_agricultor,     e.codp AS codigo_produto,     e.codr AS codigo_restaurante FROM entrega e JOIN agricultor a ON e.coda = a.coda JOIN restaurante r ON e.codr = r.codr WHERE a.cidadea = r.cidader; ","1001: 2005 (max length: 3010)
1002: 2002 (max length: 3010)
1007: 2003 (max length: 3004)
1003: 2002 (max length: 3010)
1006: 2003 (max length: 3001)","[(1001, 2005, 3010), (1002, 2002, 3010), (1007, 2003, 3004), (1003, 2002, 3010), (1006, 2003, 3001)]","[(1001, 2005, 3010), (1002, 2002, 3010), (1007, 2003, 3004), (1003, 2002, 3010), (1006, 2003, 3001)]",true,true
mbd_p2_e3_h,Obtenha o número total de restaurantes já supridos pelo agricultor “Machado de Assis”.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select count(distinct CodR) from Entrega natural join Agricultor where NomeA = 'Machado de Assis';, SELECT COUNT(DISTINCT e.codr) AS total_restaurantes FROM entrega e JOIN agricultor a ON e.coda = a.coda WHERE a.nomea = 'Machado de Assis'; ,5,"[(5,)]","[(5,)]",true,true
mbd_p2_e3_i,Liste os nomes das cidades onde ao menos um agricultor ou um restaurante esteja localizado.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,(select CidadeA from Agricultor) union (select CidadeR from Restaurante);, SELECT DISTINCT cidade FROM (     SELECT cidadea AS cidade FROM agricultor     UNION     SELECT cidader AS cidade FROM restaurante ) AS cidades; ,"Taubaté, Diadema, Osasco, Mogi das Cruzes, Atibaia, Santo André, Campinas, São Paulo, São Caetano","[('Campinas',), ('Atibaia',), ('Santo André',), ('São Caetano',), ('Diadema',), ('Mogi das Cruzes',), ('São Paulo',), ('Taubaté',), ('Osasco',)]","[('Taubaté',), ('Diadema',), ('Osasco',), ('Mogi das Cruzes',), ('Atibaia',), ('Santo André',), ('Campinas',), ('São Paulo',), ('São Caetano',)]",true,true
mbd_p2_e3_j,Obtenha o número de produtos que são fornecidos ou por um agricultor de São Paulo ou para um restaurante em São Paulo.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select count(distinct CodP) from Entrega where CodA in (select CodA from Agricultor where CidadeA = 'São Paulo') or CodR in (select codR from Restaurante where CidadeR = 'São Paulo');,,Failed,"[(5,)]",Failed,false,false
mbd_p2_e3_k,"Obtenha pares do tipo (código do agricultor, código do produto) tais que o agricultor indicado nunca tenha fornecido o produto indicado.",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,"select distinct CodA, CodP from Agricultor as A, Produto where CodP not in (select CodP from Entrega where CodA = A.CodA);"," SELECT a.coda, p.codp FROM agricultor a CROSS JOIN produto p LEFT JOIN entrega e ON a.coda = e.coda AND p.codp = e.codp WHERE e.codp IS NULL; ","[(1001, 2001), (1002, 2001), (1003, 2001), (1004, 2001), (1006, 2001), (1007, 2001), (1008, 2001), (1009, 2001), (1001, 2002), (1006, 2002), (1007, 2002), (1008, 2002), (1009, 2002), (1005, 2003), (1008, 2003), (1009, 2003), (1001, 2004), (1002, 2004), (1003, 2004), (1004, 2004), (1005, 2004), (1006, 2004), (1007, 2004), (1008, 2004), (1009, 2004), (1003, 2005), (1005, 2005), (1006, 2005), (1007, 2005), (1008, 2005), (1009, 2005), (1001, 2006), (1002, 2006), (1003, 2006), (1004, 2006), (1005, 2006), (1006, 2006), (1007, 2006), (1008, 2006), (1009, 2006), (1001, 2007), (1003, 2007), (1004, 2007), (1005, 2007), (1006, 2007), (1008, 2007), (1009, 2007), (1001, 2008), (1002, 2008), (1003, 2008), (1005, 2008), (1006, 2008), (1008, 2008), (1009, 2008), (1001, 2009), (1002, 2009), (1003, 2009), (1004, 2009), (1005, 2009), (1006, 2009), (1007, 2009), (1008, 2009), (1009, 2009), (1001, 2010), (1002, 2010), (1003, 2010), (1005, 2010), (1006, 2010), (1007, 2010), (1008, 2010), (1009, 2010), (1001, 2011), (1002, 2011), (1003, 2011), (1004, 2011), (1007, 2011), (1008, 2011), (1009, 2011), (1001, 2012), (1002, 2012), (1004, 2012), (1005, 2012), (1006, 2012), (1007, 2012), (1008, 2012), (1009, 2012), (1001, 2013), (1002, 2013), (1003, 2013), (1004, 2013), (1005, 2013), (1006, 2013), (1007, 2013), (1008, 2013), (1009, 2013)]","[(1001, 2001), (1001, 2002), (1001, 2004), (1001, 2006), (1001, 2007), (1001, 2008), (1001, 2009), (1001, 2010), (1001, 2011), (1001, 2012), (1001, 2013), (1002, 2001), (1002, 2004), (1002, 2006), (1002, 2008), (1002, 2009), (1002, 2010), (1002, 2011), (1002, 2012), (1002, 2013), (1003, 2001), (1003, 2004), (1003, 2005), (1003, 2006), (1003, 2007), (1003, 2008), (1003, 2009), (1003, 2010), (1003, 2011), (1003, 2013), (1004, 2001), (1004, 2004), (1004, 2006), (1004, 2007), (1004, 2009), (1004, 2011), (1004, 2012), (1004, 2013), (1005, 2003), (1005, 2004), (1005, 2005), (1005, 2006), (1005, 2007), (1005, 2008), (1005, 2009), (1005, 2010), (1005, 2012), (1005, 2013), (1006, 2001), (1006, 2002), (1006, 2004), (1006, 2005), (1006, 2006), (1006, 2007), (1006, 2008), (1006, 2009), (1006, 2010), (1006, 2012), (1006, 2013), (1007, 2001), (1007, 2002), (1007, 2004), (1007, 2005), (1007, 2006), (1007, 2009), (1007, 2010), (1007, 2011), (1007, 2012), (1007, 2013), (1008, 2001), (1008, 2002), (1008, 2003), (1008, 2004), (1008, 2005), (1008, 2006), (1008, 2007), (1008, 2008), (1008, 2009), (1008, 2010), (1008, 2011), (1008, 2012), (1008, 2013), (1009, 2001), (1009, 2002), (1009, 2003), (1009, 2004), (1009, 2005), (1009, 2006), (1009, 2007), (1009, 2008), (1009, 2009), (1009, 2010), (1009, 2011), (1009, 2012), (1009, 2013)]","[(1001, 2001), (1002, 2001), (1003, 2001), (1004, 2001), (1006, 2001), (1007, 2001), (1008, 2001), (1009, 2001), (1001, 2002), (1006, 2002), (1007, 2002), (1008, 2002), (1009, 2002), (1005, 2003), (1008, 2003), (1009, 2003), (1001, 2004), (1002, 2004), (1003, 2004), (1004, 2004), (1005, 2004), (1006, 2004), (1007, 2004), (1008, 2004), (1009, 2004), (1003, 2005), (1005, 2005), (1006, 2005), (1007, 2005), (1008, 2005), (1009, 2005), (1001, 2006), (1002, 2006), (1003, 2006), (1004, 2006), (1005, 2006), (1006, 2006), (1007, 2006), (1008, 2006), (1009, 2006), (1001, 2007), (1003, 2007), (1004, 2007), (1005, 2007), (1006, 2007), (1008, 2007), (1009, 2007), (1001, 2008), (1002, 2008), (1003, 2008), (1005, 2008), (1006, 2008), (1008, 2008), (1009, 2008), (1001, 2009), (1002, 2009), (1003, 2009), (1004, 2009), (1005, 2009), (1006, 2009), (1007, 2009), (1008, 2009), (1009, 2009), (1001, 2010), (1002, 2010), (1003, 2010), (1005, 2010), (1006, 2010), (1007, 2010), (1008, 2010), (1009, 2010), (1001, 2011), (1002, 2011), (1003, 2011), (1004, 2011), (1007, 2011), (1008, 2011), (1009, 2011), (1001, 2012), (1002, 2012), (1004, 2012), (1005, 2012), (1006, 2012), (1007, 2012), (1008, 2012), (1009, 2012), (1001, 2013), (1002, 2013), (1003, 2013), (1004, 2013), (1005, 2013), (1006, 2013), (1007, 2013), (1008, 2013), (1009, 2013)]",false,true
mbd_p2_e3_l,Obtenha os códigos dos produtos e suas respectivas quantidades médias por entrega para os produtos que são fornecidos em uma quantidade média por entrega superior a 30 quilos.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select codP from Entrega group by codP having avg(QtdeQuilos) > 30;," SELECT codp, AVG(qtdequilos) AS media_por_entrega FROM entrega GROUP BY codp HAVING AVG(qtdequilos) > 30; ","[(2003, Decimal('38.0909090909090909')), (2012, Decimal('36.0000000000000000')), (2002, Decimal('34.5000000000000000')), (2010, Decimal('52.0000000000000000')), (2011, Decimal('33.5000000000000000')), (2001, Decimal('36.0000000000000000'))]","[(2003,), (2012,), (2002,), (2010,), (2011,), (2001,)]","[(2003, Decimal('38.0909090909090909')), (2012, Decimal('36.0000000000000000')), (2002, Decimal('34.5000000000000000')), (2010, Decimal('52.0000000000000000')), (2011, Decimal('33.5000000000000000')), (2001, Decimal('36.0000000000000000'))]",true,true
mbd_p2_e3_m,"Obtenha o(s) nome(s) dos produtos mais fornecidos a restaurantes (ou seja, os produtos dos quais as somas das quantidades já entregues é a maior possível).",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select NomeP from Entrega natural join Produto group by NomeP having sum(QtdeQuilos) >= ALL (select sum(QtdeQuilos) from Entrega group by CodP);," WITH product_totals AS (     SELECT          p.codp,          p.nomep,          SUM(e.qtdequilos) AS total_qtde     FROM entrega e     JOIN restaurante r ON e.codr = r.codr     JOIN produto p ON e.codp = p.codp     GROUP BY p.codp, p.nomep ) SELECT nomep FROM product_totals WHERE total_qtde = (SELECT MAX(total_qtde) FROM product_totals); ",cebola,"[('cebola',)]","[('cebola',)]",true,true
mbd_p2_e3_n,Obtenha o nome do(s) agricultor(es) que fez(fizeram) a entrega de produtos mais antiga registrada no BD.,cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select NomeA from Entrega natural join Agricultor where DataEntrega = (select min(DataEntrega) from Entrega);, SELECT a.nomea FROM agricultor a JOIN entrega e ON a.coda = e.coda WHERE e.dataentrega = (SELECT MIN(dataentrega) FROM entrega); ,"Ana Maria Machado, Machado de Assis","[('Ana Maria Machado',), ('Machado de Assis',)]","[('Ana Maria Machado',), ('Machado de Assis',)]",false,true
mbd_p2_e3_o,"Liste os nomes dos produtos que são oferecidos a todos os restaurantes do BD. Ou seja, um produto não deve aparecer na lista se houver um restaurante que nunca o tenha recebido.",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,select NomeP from Produto as P where not exists ( 	(select CodR from Restaurante) 	except 	(select CodR from Entrega where CodP = P.CodP));,"SELECT p.nomep FROM produto p JOIN entrega e ON p.codp = e.codp GROUP BY p.codp, p.nomep HAVING COUNT(DISTINCT e.codr) = (SELECT COUNT(*) FROM restaurante);",cebola,"[('cebola',)]","[('cebola',)]",true,false
mbd_p2_e3_p,"Liste todos os pares possíveis do tipo (i,j) tal que i é o nome de um agricultor, j é o nome de um restaurante e i já entregou um produto para j. Mas atenção: o nome de todos os agricultores cadastrados no BD deve aparecer no conjunto resposta. Se um agricultor nunca fez uma entrega, então o seu nome deve vir acompanhado de NULL no conjunto resposta",cooperagri,"Agricultor(CodA: integer, NomeA: string, CidadeA: string)
Produto(CodP: integer, NomeP: string, PrecoQuilo: real)
Restaurante( CodR : integer, NomeR:string, CidadeR: string)
Entrega(CodA: integer, CodP: integer, CodR: integer, DataEntrega: date, QtdeQuilos: integer)",True,"select NomeA, NomeR from (Entrega natural join Restaurante) natural right outer join Agricultor;"," SELECT DISTINCT a.nomea AS agricultor, r.nomer AS restaurante FROM agricultor a LEFT JOIN entrega e ON a.coda = e.coda LEFT JOIN restaurante r ON e.codr = r.codr ORDER BY a.nomea, r.nomer; ","[('Ana Maria Machado', 'A Todo Sabor'), ('Ana Maria Machado', 'RU-USP'), ('Ana Maria Machado', 'Sabor de Minas'), ('Castro Alves', None), ('Cecília Meireles', 'Bom Gosto'), ('Cecília Meireles', 'Bom de Garfo'), ('Cecília Meireles', 'Panela de Ouro'), ('José de Alencar', 'A Todo Sabor'), ('José de Alencar', 'Bom Gosto'), ('José de Alencar', 'Bom de Garfo'), ('José de Alencar', 'Panela de Ouro'), ('José de Alencar', 'Sabor de Minas'), ('Lima Barreto', 'Brasileirinho'), ('Lima Barreto', 'Sabor de Minas'), ('Machado de Assis', 'A Todo Sabor'), ('Machado de Assis', 'Bom de Garfo'), ('Machado de Assis', 'Brasil a Gosto'), ('Machado de Assis', 'RU-USP'), ('Machado de Assis', 'Sabor de Minas'), ('Manuel Bandeira', 'A Todo Sabor'), ('Manuel Bandeira', 'Bom de Garfo'), ('Manuel Bandeira', 'Brasil a Gosto'), ('Manuel Bandeira', 'Prato-Cheio'), ('Manuel Bandeira', 'Sabores do Interior'), ('Monteiro Lobato', None), ('Oswald de Andrade', 'Sabor de Minas')]","[('Ana Maria Machado', 'A Todo Sabor'), ('Machado de Assis', 'RU-USP'), ('Lima Barreto', 'Sabor de Minas'), ('Manuel Bandeira', 'Prato-Cheio'), ('Machado de Assis', 'Brasil a Gosto'), ('Cecília Meireles', 'Bom Gosto'), ('Oswald de Andrade', 'Sabor de Minas'), ('Oswald de Andrade', 'Sabor de Minas'), ('José de Alencar', 'A Todo Sabor'), ('José de Alencar', 'Bom de Garfo'), ('Machado de Assis', 'Bom de Garfo'), ('Cecília Meireles', 'Panela de Ouro'), ('José de Alencar', 'Sabor de Minas'), ('José de Alencar', 'Panela de Ouro'), ('Machado de Assis', 'Sabor de Minas'), ('Oswald de Andrade', 'Sabor de Minas'), ('Ana Maria Machado', 'Sabor de Minas'), ('Manuel Bandeira', 'A Todo Sabor'), ('Manuel Bandeira', 'Bom de Garfo'), ('Cecília Meireles', 'Bom de Garfo'), ('Lima Barreto', 'Brasileirinho'), ('José de Alencar', 'Bom Gosto'), ('Ana Maria Machado', 'RU-USP'), ('Cecília Meireles', 'Bom de Garfo'), ('Manuel Bandeira', 'Sabores do Interior'), ('Manuel Bandeira', 'Brasil a Gosto'), ('Machado de Assis', 'A Todo Sabor'), ('Monteiro Lobato', None), ('Castro Alves', None)]","[('Ana Maria Machado', 'A Todo Sabor'), ('Ana Maria Machado', 'RU-USP'), ('Ana Maria Machado', 'Sabor de Minas'), ('Castro Alves', None), ('Cecília Meireles', 'Bom Gosto'), ('Cecília Meireles', 'Bom de Garfo'), ('Cecília Meireles', 'Panela de Ouro'), ('José de Alencar', 'A Todo Sabor'), ('José de Alencar', 'Bom Gosto'), ('José de Alencar', 'Bom de Garfo'), ('José de Alencar', 'Panela de Ouro'), ('José de Alencar', 'Sabor de Minas'), ('Lima Barreto', 'Brasileirinho'), ('Lima Barreto', 'Sabor de Minas'), ('Machado de Assis', 'A Todo Sabor'), ('Machado de Assis', 'Bom de Garfo'), ('Machado de Assis', 'Brasil a Gosto'), ('Machado de Assis', 'RU-USP'), ('Machado de Assis', 'Sabor de Minas'), ('Manuel Bandeira', 'A Todo Sabor'), ('Manuel Bandeira', 'Bom de Garfo'), ('Manuel Bandeira', 'Brasil a Gosto'), ('Manuel Bandeira', 'Prato-Cheio'), ('Manuel Bandeira', 'Sabores do Interior'), ('Monteiro Lobato', None), ('Oswald de Andrade', 'Sabor de Minas')]",false,false
mbd_p2_p1_a,Encontre o nome de todos os Juniores (nível = JR) que estão matriculados em um curso ministrado por Ivana Teach.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select A.nomeAluno from Aluno as A, Curso as C, Professor as P, Matriculado as M where A.nivel='JR' and P.nomeProf = 'Ivana Teach' and C.idProf = P.idProf and M.nomeCurso = C.nome and M.nroAluno = A.nroAluno;", SELECT DISTINCT a.nomealuno FROM aluno a JOIN matriculado m ON a.nroaluno = m.nroaluno JOIN curso c ON m.nomecurso = c.nome JOIN professor p ON c.idprof = p.idprof WHERE a.nivel = 'JR'   AND p.nomeprof = 'Ivana Teach'; ,"Christopher Garcia, Paul Hall","[('Christopher Garcia',), ('Paul Hall',)]","[('Christopher Garcia',), ('Paul Hall',)]",true,true
mbd_p2_p1_b,Encontre o nome do aluno mais velho que é formado em History ou matriculado em um curso ministrado pelo Ivana Teach.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nomeAluno from Aluno where formacao = 'History' or nroAluno in ( select A2.nroALuno from Aluno as A2, Curso as C, Professor as P, Matriculado as M where P.nomeProf = 'Ivana Teach' and C.idProf = P.idProf and M.nomeCurso = C.nome and M.nroAluno = A2.nroAluno) and idade >= all ( select A1.idade from Aluno as A1 where A1.formacao = 'History' or  A1.nroAluno in ( select A2.nroALuno from Aluno as A2, Curso as C, Professor as P, Matriculado as M where P.nomeProf = 'Ivana Teach' and C.idProf = P.idProf and M.nomeCurso = C.nome and M.nroAluno = A2.nroAluno));", SELECT DISTINCT a.nomealuno FROM aluno a LEFT JOIN matriculado m ON a.nroaluno = m.nroaluno LEFT JOIN curso c ON m.nomecurso = c.nome LEFT JOIN professor p ON c.idprof = p.idprof WHERE a.formacao = 'History' OR p.nomeprof = 'Ivana Teach' ORDER BY a.idade DESC LIMIT 1; ,Failed,"[('Christopher Garcia',), ('Angela Martinez',)]",Failed,true,false
mbd_p2_p1_c,Encontre os nomes de todos os cursos que são ministrados na sala R128 ou que têm 3 ou mais alunos matriculados.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,select nome from Curso as C where sala = 'R128' or (select count(distinct nroAluno)  from Matriculado where nomeCurso = C.nome) >= 3;," SELECT DISTINCT c.nome FROM curso c LEFT JOIN (     SELECT nomecurso, COUNT(DISTINCT nroaluno) AS num_alunos     FROM matriculado     GROUP BY nomecurso ) m ON c.nome = m.nomecurso WHERE c.sala = 'R128'    OR (m.num_alunos IS NOT NULL AND m.num_alunos >= 3); ","Operating System Design, Data Structures, Database Systems, Dairy Herd Management, Intoduction to Math, Patent Law, Archaeology of the Incas","[('Data Structures',), ('Database Systems',), ('Operating System Design',), ('Archaeology of the Incas',), ('Patent Law',), ('Dairy Herd Management',), ('Intoduction to Math',)]","[('Operating System Design',), ('Data Structures',), ('Database Systems',), ('Dairy Herd Management',), ('Intoduction to Math',), ('Patent Law',), ('Archaeology of the Incas',)]",true,true
mbd_p2_p1_d,Encontre os nomes de todos os alunos que estão matriculados em dois cursos que são ministrados no mesmo horário.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nomeAluno from Aluno where nroAluno in (select M1.nroAluno from Matriculado as M1, Matriculado as M2, Curso as C1, Curso as C2 where M1.nroAluno = M2.nroAluno and M1.nomeCurso <> M2.nomeCurso and M1.nomeCurso = C1.nome and M2.nomeCurso = C2.nome and C1.horario = C2.horario);", SELECT DISTINCT a.nomealuno FROM aluno a JOIN matriculado m1 ON a.nroaluno = m1.nroaluno JOIN curso c1 ON m1.nomecurso = c1.nome JOIN matriculado m2 ON a.nroaluno = m2.nroaluno AND m1.nomecurso <> m2.nomecurso JOIN curso c2 ON m2.nomecurso = c2.nome WHERE c1.horario = c2.horario; ,Luis Hernandez,"[('Luis Hernandez',)]","[('Luis Hernandez',)]",false,true
mbd_p2_p1_e,Encontre os nomes dos professores para os quais a quantidade de alunos na lista de matriculados de ao menos um dos cursos que eles ministram é menor do que 2.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nomeProf from professor as P, curso as C where P.idProf = C.idProf and (select count(nroAluno) from Matriculado where C.nome = nomeCurso) < 2;"," SELECT DISTINCT p.nomeprof FROM professor p JOIN curso c ON p.idprof = c.idprof LEFT JOIN matriculado m ON c.nome = m.nomecurso GROUP BY p.nomeprof, c.nome HAVING COUNT(m.nroaluno) < 2; ","Mary Johnson, Jennifer Thomas, Patricia Jones, Linda Davis, Robert Brown, John Williams, William Moore, Richard Jackson, Elizabeth Taylor, Barbara Wilson","[('Linda Davis',), ('Barbara Wilson',), ('John Williams',), ('John Williams',), ('Barbara Wilson',), ('Jennifer Thomas',), ('William Moore',), ('Richard Jackson',), ('Elizabeth Taylor',), ('Elizabeth Taylor',), ('Richard Jackson',), ('Richard Jackson',), ('Richard Jackson',), ('Richard Jackson',), ('John Williams',), ('Robert Brown',), ('Mary Johnson',), ('Patricia Jones',), ('Richard Jackson',)]","[('Mary Johnson',), ('Jennifer Thomas',), ('Patricia Jones',), ('Linda Davis',), ('Robert Brown',), ('John Williams',), ('William Moore',), ('Richard Jackson',), ('Elizabeth Taylor',), ('Barbara Wilson',)]",true,false
mbd_p2_p1_f,"Para cada valor de nível que aparece em Aluno, imprima o nível e idade média dos alunos desse nível.",alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nivel, avg(idade) as idadeMedia from aluno group by nivel;","SELECT nivel, AVG(idade) AS idade_media FROM aluno GROUP BY nivel;","[('JR', Decimal('19.5000000000000000')), ('SR', Decimal('20.7142857142857143')), ('FR', Decimal('17.6666666666666667')), ('SO', Decimal('18.4000000000000000'))]","[('JR', Decimal('19.5000000000000000')), ('SR', Decimal('20.7142857142857143')), ('FR', Decimal('17.6666666666666667')), ('SO', Decimal('18.4000000000000000'))]","[('JR', Decimal('19.5000000000000000')), ('SR', Decimal('20.7142857142857143')), ('FR', Decimal('17.6666666666666667')), ('SO', Decimal('18.4000000000000000'))]",true,true
mbd_p2_p1_g,"Para cada valor de nível que aparece em Aluno exceto JR, imprima o nível e idade média dos alunos desse nível.",alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nivel, avg(idade) as idadeMedia from aluno group by nivel having nivel <> 'JR';","SELECT nivel, AVG(idade) AS media_idade FROM aluno WHERE nivel <> 'JR' GROUP BY nivel;","[('SR', Decimal('20.7142857142857143')), ('FR', Decimal('17.6666666666666667')), ('SO', Decimal('18.4000000000000000'))]","[('SR', Decimal('20.7142857142857143')), ('FR', Decimal('17.6666666666666667')), ('SO', Decimal('18.4000000000000000'))]","[('SR', Decimal('20.7142857142857143')), ('FR', Decimal('17.6666666666666667')), ('SO', Decimal('18.4000000000000000'))]",false,true
mbd_p2_p1_h,"Para cada professor que ministra cursos apenas na sala R128, imprima seu nome e o número total de cursos que ele ou ela ministra.",alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select nomeProf, numeroCursos from professor natural join (select idProf, count(*) as numeroCursos from curso  where idProf not in (select idProf from curso where sala <> 'R128')  group by idProf) as C;"," SELECT     p.nomeprof,     COUNT(c.idprof) AS total_cursos FROM professor p JOIN curso c ON p.idprof = c.idprof GROUP BY p.nomeprof HAVING COUNT(CASE WHEN c.sala <> 'R128' THEN 1 END) = 0; ","[('Robert Brown', 1)]","[('Robert Brown', 1)]","[('Robert Brown', 1)]",true,true
mbd_p2_p1_i,Encontre os nomes dos alunos matriculados no número máximo de cursos.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,select nomeAluno from Aluno where nroAluno in (select nroAluno from Matriculado group by nroAluno  having count(*) >= all  (select count(nomeCurso) from Matriculado group by nroAluno));," WITH enrollment_counts AS (     SELECT nroaluno, COUNT(*) AS course_count     FROM matriculado     GROUP BY nroaluno ) SELECT a.nomealuno FROM aluno a JOIN enrollment_counts ec ON a.nroaluno = ec.nroaluno WHERE ec.course_count = (     SELECT MAX(course_count) FROM enrollment_counts ); ","Ana Lopez, Juan Rodriguez","[('Ana Lopez',), ('Juan Rodriguez',)]","[('Ana Lopez',), ('Juan Rodriguez',)]",false,true
mbd_p2_p1_j,Encontre os nomes dos alunos matriculados em nenhum curso.,alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,select nomeAluno from Aluno where nroAluno not in (select nroAluno from Matriculado);,SELECT nomealuno FROM aluno WHERE nroaluno NOT IN (SELECT nroaluno FROM matriculado);,"Maria White, Charles Harris, Angela Martinez, Thomas Robinson, Margaret Clark, Dorthy Lewis, Daniel Lee, Nancy Allen, Mark Young, Donald King, George Wright, Steven Green, Edward Baker","[('Maria White',), ('Charles Harris',), ('Angela Martinez',), ('Thomas Robinson',), ('Margaret Clark',), ('Dorthy Lewis',), ('Daniel Lee',), ('Nancy Allen',), ('Mark Young',), ('Donald King',), ('George Wright',), ('Steven Green',), ('Edward Baker',)]","[('Maria White',), ('Charles Harris',), ('Angela Martinez',), ('Thomas Robinson',), ('Margaret Clark',), ('Dorthy Lewis',), ('Daniel Lee',), ('Nancy Allen',), ('Mark Young',), ('Donald King',), ('George Wright',), ('Steven Green',), ('Edward Baker',)]",true,true
mbd_p2_p1_k,"Para cada valor de idade que aparece em Aluno, encontre o valor do nível que aparece com mais frequência. Por exemplo, se houver mais alunos no nível FR com idade 18 do que os alunos com idade 18 dos níveis SR, JR ou SO, você deve imprimir o par (18,FR).",alunos,"Aluno(nroAluno: integer, nomeAluno: string, formação: string, nivel: string, idade: integer)
Curso(nome: string, horario: string, sala: string, idProf: integer)
Matriculado(nroAluno: integer, nomeCurso: string)
Professor(idProf: integer, nomeProf: string, idDepto: integer)",True,"select idade, nivel from Aluno as A group by idade, nivel having count(nivel) >= all (select count(*) from Aluno where idade = A.idade group by nivel);"," WITH frequency AS (     SELECT         idade,         nivel,         COUNT(*) AS freq,         ROW_NUMBER() OVER (PARTITION BY idade ORDER BY COUNT(*) DESC) AS rn     FROM aluno     GROUP BY idade, nivel ) SELECT idade, nivel FROM frequency WHERE rn = 1; ","[(Decimal('17'), 'FR'), (Decimal('18'), 'FR'), (Decimal('19'), 'SO'), (Decimal('20'), 'JR'), (Decimal('21'), 'SR'), (Decimal('22'), 'SR')]","[(Decimal('17'), 'FR'), (Decimal('18'), 'FR'), (Decimal('21'), 'SR'), (Decimal('20'), 'JR'), (Decimal('19'), 'SO'), (Decimal('22'), 'SR')]","[(Decimal('17'), 'FR'), (Decimal('18'), 'FR'), (Decimal('19'), 'SO'), (Decimal('20'), 'JR'), (Decimal('21'), 'SR'), (Decimal('22'), 'SR')]",false,false
